{"ast":null,"code":"var _jsxFileName = \"E:\\\\matship\\\\frontend\\\\src\\\\Pages\\\\UPLOAD\\\\Tests\\\\TestComponents\\\\Table.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Table({\n  sno,\n  x_axis,\n  y_axis,\n  index,\n  excelData\n}) {\n  _s();\n  // const handlePaste = async(e, rowIndex, axis , i, index) => {\n  //     // const n = dynamicArray;\n  //     // console.log(dynamicArray)\n  //     // const clipboardData = e.clipboardData || window.clipboardData;\n  //     // const pastedData = clipboardData.getData('text').split('\\n');\n  //     // const rows = pastedData.length\n  //     // console.log(\"Pasted\")\n  //     // await handleUserInput(rows)\n  //     // pastedData.forEach((ind, inde) => {\n  //     //   console.table(index+1, i+1, axis, rowIndex+1, Number(ind))\n  //     //   if(axis === 'x_axis'){\n  //     //     console.log(ind)\n  //     //     insertOrUpdateAtIndexForPasting(n[index][i][i][0], inde, Number(ind))\n  //     //   }else{\n  //     //     insertOrUpdateAtIndexForPasting(n[index][i][i][1], inde, Number(ind))\n  //     //     console.log(ind)\n  //     //   }\n  //     //   console.log(n[index][i][i])\n  //     // })\n  //     // console.log(n)\n  //     // await setDynamicArray(n)\n  // };\n\n  const [tableData, setTableData] = useState([['Column 1', 'Column 2'] // Initial row\n  ]);\n\n  const handlePaste = event => {\n    const pastedText = event.clipboardData.getData('text/plain');\n    if (!pastedText) return;\n\n    // Determine target column based on click position\n    const targetColumn = event.target.cellIndex; // Get index of clicked cell\n\n    // Split data into rows and columns, preserving empty columns\n    const rows = pastedText.split('\\n').map(line => line.trim()).filter(line => line).map(line => line.split('\\t'));\n\n    // Update table data, correctly placing values in target column\n    setTableData(prevData => prevData.concat(rows.map(row => [...prevData[prevData.length - 1], ...row])));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"Tabel \", sno, /*#__PURE__*/_jsxDEV(\"table\", {\n      onPaste: handlePaste,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Column 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Column 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tableData.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: row[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row[1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(Table, \"bLrBGFxn9X8KFMwhLWYFuRS0aOg=\");\n_c = Table;\nexport default Table;\n{/* <table border=\"1\">\r\n          <thead>\r\n            <tr>\r\n              <th>{x_axis[index]}</th>\r\n              <th>{y_axis[index]}</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {excelData.map((row, rowIndex) => (\r\n              <tr key={rowIndex}>\r\n                <td>\r\n                  <input\r\n                    type=\"number\"\r\n                    onChange={(e) => {\r\n                      console.log(\"sno\", sno ,\":\", e.target.value)\r\n                    }}\r\n                    // value={dynamicArray[index][i][i][0][rowIndex]}\r\n                    // onPaste={(e) => handlePaste(e,rowIndex, 'x_axis', i, index)}\r\n                    // onChange={(e) => handleInputChange(e, rowIndex, 'x_axis', i, index)}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    type=\"number\"\r\n                    // value={dynamicArray[index][i][i][1][rowIndex]}\r\n                    // onPaste={(e) => handlePaste(e,rowIndex, 'y_axis', i, index)}\r\n                    // onChange={(e) => handleInputChange(e, rowIndex, 'y_axis', i, index)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table> */}\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Table","sno","x_axis","y_axis","index","excelData","_s","tableData","setTableData","handlePaste","event","pastedText","clipboardData","getData","targetColumn","target","cellIndex","rows","split","map","line","trim","filter","prevData","concat","row","length","children","onPaste","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/matship/frontend/src/Pages/UPLOAD/Tests/TestComponents/Table.js"],"sourcesContent":["import React, {useState} from 'react'\r\n\r\nfunction Table({ sno, x_axis, y_axis, index, excelData }) {\r\n\r\n\r\n    // const handlePaste = async(e, rowIndex, axis , i, index) => {\r\n    //     // const n = dynamicArray;\r\n    //     // console.log(dynamicArray)\r\n    //     // const clipboardData = e.clipboardData || window.clipboardData;\r\n    //     // const pastedData = clipboardData.getData('text').split('\\n');\r\n    //     // const rows = pastedData.length\r\n    //     // console.log(\"Pasted\")\r\n    //     // await handleUserInput(rows)\r\n    //     // pastedData.forEach((ind, inde) => {\r\n    //     //   console.table(index+1, i+1, axis, rowIndex+1, Number(ind))\r\n    //     //   if(axis === 'x_axis'){\r\n    //     //     console.log(ind)\r\n    //     //     insertOrUpdateAtIndexForPasting(n[index][i][i][0], inde, Number(ind))\r\n    //     //   }else{\r\n    //     //     insertOrUpdateAtIndexForPasting(n[index][i][i][1], inde, Number(ind))\r\n    //     //     console.log(ind)\r\n    //     //   }\r\n    //     //   console.log(n[index][i][i])\r\n    //     // })\r\n    //     // console.log(n)\r\n    //     // await setDynamicArray(n)\r\n    // };\r\n\r\n\r\n    const [tableData, setTableData] = useState([\r\n      ['Column 1', 'Column 2'], // Initial row\r\n    ]);\r\n\r\n    const handlePaste = (event) => {\r\n    const pastedText = event.clipboardData.getData('text/plain');\r\n\r\n    if (!pastedText) return;\r\n\r\n    // Determine target column based on click position\r\n    const targetColumn = event.target.cellIndex; // Get index of clicked cell\r\n\r\n    // Split data into rows and columns, preserving empty columns\r\n    const rows = pastedText\r\n      .split('\\n')\r\n      .map((line) => line.trim())\r\n      .filter((line) => line)\r\n      .map((line) => line.split('\\t'));\r\n\r\n    // Update table data, correctly placing values in target column\r\n    setTableData((prevData) =>\r\n      prevData.concat(\r\n        rows.map((row) => [...prevData[prevData.length - 1], ...row])\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n    Tabel {sno}\r\n    <table onPaste={handlePaste}>\r\n      <thead>\r\n        <tr>\r\n          <th>Column 1</th>\r\n          <th>Column 2</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {tableData.map((row, index) => (\r\n          <tr key={index}>\r\n            <td>{row[0]}</td>\r\n            <td>{row[1]}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Table\r\n\r\n\r\n\r\n\r\n\r\n\r\n        {/* <table border=\"1\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>{x_axis[index]}</th>\r\n                      <th>{y_axis[index]}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {excelData.map((row, rowIndex) => (\r\n                      <tr key={rowIndex}>\r\n                        <td>\r\n                          <input\r\n                            type=\"number\"\r\n                            onChange={(e) => {\r\n                              console.log(\"sno\", sno ,\":\", e.target.value)\r\n                            }}\r\n                            // value={dynamicArray[index][i][i][0][rowIndex]}\r\n                            // onPaste={(e) => handlePaste(e,rowIndex, 'x_axis', i, index)}\r\n                            // onChange={(e) => handleInputChange(e, rowIndex, 'x_axis', i, index)}\r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <input\r\n                            type=\"number\"\r\n                            // value={dynamicArray[index][i][i][1][rowIndex]}\r\n                            // onPaste={(e) => handlePaste(e,rowIndex, 'y_axis', i, index)}\r\n                            // onChange={(e) => handleInputChange(e, rowIndex, 'y_axis', i, index)}\r\n                          />\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table> */}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}