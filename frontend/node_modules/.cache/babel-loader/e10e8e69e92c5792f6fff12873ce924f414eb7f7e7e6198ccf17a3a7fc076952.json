{"ast":null,"code":"var _jsxFileName = \"E:\\\\matship\\\\frontend\\\\src\\\\Pages\\\\UPLOAD\\\\Tests\\\\ISO527\\\\Components\\\\Temperature.js\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useEffect, useRef } from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Temperature({\n  numberOfDataSets\n}) {\n  _s();\n  const ref = useRef();\n  // Create Temperature Input Fields\n  const [temperature, setTemperature] = useState(Array(numberOfDataSets).fill(null));\n  const createTemperatureTags = () => {\n    const inputTags = [];\n    for (let i = 0; i < numberOfDataSets; i++) {\n      inputTags.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test_data_box\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: ref,\n          type: \"number\",\n          onChange: event => {\n            setTemperature(prevInputValues => {\n              const newInputValues = [...prevInputValues];\n              newInputValues[i] = Number(event.target.value);\n              return newInputValues;\n            });\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 17\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this));\n    }\n    return inputTags;\n  };\n  const setAll = () => {\n    const filled = temperature.filter(t => t !== null);\n    console.log(temperature[filled.length - 1]);\n    for (let i = filled.length; i < numberOfDataSets; i++) {\n      console.log(i);\n      setTemperature(prevInputValues => {\n        const newInputValues = [...prevInputValues];\n        newInputValues[i] = temperature[filled.length - 1];\n        return newInputValues;\n      });\n    }\n    console.log(\"YTMpe\", temperature);\n  };\n  console.log(ref);\n  for (let i = 0; ii < ref.length; i++) {}\n  useEffect(() => {\n    console.log(\"Changed sda\");\n    console.log(temperature);\n    setTemperature(temperature);\n  }, [temperature]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Temperature\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), numberOfDataSets, /*#__PURE__*/_jsxDEV(\"p\", {\n      onClick: setAll,\n      children: \"All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), createTemperatureTags()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(Temperature, \"0eYRay30Smiyu4MjAboJPXp9qyw=\");\n_c = Temperature;\nexport default Temperature;\nvar _c;\n$RefreshReg$(_c, \"Temperature\");","map":{"version":3,"names":["React","Fragment","useEffect","useRef","useState","jsxDEV","_jsxDEV","Temperature","numberOfDataSets","_s","ref","temperature","setTemperature","Array","fill","createTemperatureTags","inputTags","i","push","className","children","type","onChange","event","prevInputValues","newInputValues","Number","target","value","fileName","_jsxFileName","lineNumber","columnNumber","setAll","filled","filter","t","console","log","length","ii","onClick","_c","$RefreshReg$"],"sources":["E:/matship/frontend/src/Pages/UPLOAD/Tests/ISO527/Components/Temperature.js"],"sourcesContent":["import React, { Fragment, useEffect, useRef } from 'react'\r\nimport { useState } from 'react';\r\n\r\nfunction Temperature({numberOfDataSets}) {\r\n    const ref = useRef()\r\n    // Create Temperature Input Fields\r\n    const [temperature, setTemperature] = useState(Array(numberOfDataSets).fill(null));\r\n    \r\n    const createTemperatureTags = () => {\r\n        const inputTags = [];\r\n        for (let i = 0; i < numberOfDataSets; i++) {\r\n        inputTags.push(\r\n            <div key={i} className='test_data_box'>\r\n                {/* <p>D{i+1}</p> */}\r\n                <input \r\n                ref={ref}\r\n                key={i} type=\"number\" onChange={(event) => {\r\n                    setTemperature((prevInputValues) => {\r\n                    const newInputValues = [...prevInputValues];\r\n                    newInputValues[i] = Number(event.target.value)\r\n                    return newInputValues;\r\n                    });\r\n                }} \r\n                />\r\n            </div>\r\n        );\r\n        }\r\n        return inputTags;\r\n    };\r\n\r\n    const setAll = () => {  \r\n        const filled = temperature.filter((t) => t!==null)\r\n        console.log(temperature[filled.length-1])\r\n        for(let i=filled.length; i<numberOfDataSets; i++){\r\n            console.log(i)\r\n            setTemperature((prevInputValues) => {\r\n                const newInputValues = [...prevInputValues];\r\n                newInputValues[i] = temperature[filled.length-1]\r\n                return newInputValues;\r\n            });\r\n        }\r\n\r\n        console.log(\"YTMpe\", temperature)\r\n    }\r\n    console.log(ref)\r\n    for(let i=0; ii<ref.length; i++){\r\n\r\n    }\r\n    useEffect(() => {\r\n        console.log(\"Changed sda\")\r\n        console.log(temperature)\r\n        setTemperature(temperature)\r\n    }, [temperature])\r\n\r\n  return (\r\n    <Fragment>\r\n        <h2>Temperature</h2>\r\n            {\r\n                numberOfDataSets\r\n            }\r\n            <p onClick={setAll}>All</p>\r\n            {\r\n                createTemperatureTags()\r\n            }\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Temperature"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}