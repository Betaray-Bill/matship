{"ast":null,"code":"var _jsxFileName = \"E:\\\\matship\\\\frontend\\\\src\\\\Pages\\\\UPLOAD\\\\Tests\\\\ISO527\\\\Components\\\\TestCategoryComponent.js\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useEffect, useRef } from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TestCategoryComponent({\n  numberOfDataSets,\n  data,\n  type,\n  component\n}) {\n  _s();\n  // Create a ref\n  const myInputRef = useRef(null);\n  // Create Temperature Input Fields\n  // Array(numberOfDataSets).fill(null)\n  const [temperature, setTemperature] = useState(Array(numberOfDataSets).fill(null));\n\n  // const createTemperatureTags = () => {\n  //     const inputTags = [];\n  //     for (let i = 0; i < numberOfDataSets; i++) {\n  //     inputTags.push(\n  //         <div key={i} className='test_data_box'>\n  //             <input className='temp_input'\n  //                 key={i} type=\"number\" onChange={(event) => {\n  //                     setTemperature((prevInputValues) => {\n  //                     const newInputValues = [...prevInputValues];\n  //                     newInputValues[i] = Number(event.target.value)\n  //                     return newInputValues;\n  //                     });\n  //                 }} \n  //             />\n  //             {\n  //                 i == 0 ? \n  //                 <div className=\"setAll\" onClick={() =>setAll(component)}>\n  //                     <ion-icon name=\"chevron-forward-outline\"></ion-icon>\n  //                 </div> : \"\"\n  //             }\n  //         </div>\n  //     );\n  //     }\n  //     return inputTags;\n  // };\n\n  // Create Conditioned Input Fields\n  //   const [conditioned, setConditioned] = useState([]);\n  //   const createConditionedTags = () => {\n  //     const inputTags = [];\n  //     for (let i = 0; i < numberOfDataSets; i++) {\n  //       inputTags.push(\n  //         <div key={i} className='test_data_box'>\n  //             {/* <p>D{i+1}</p> */}\n  //             <select \n  //               key={i} type=\"number\" onChange={(event) => {\n  //                 setConditioned((prevInputValues) => {\n  //                   const newInputValues = [...prevInputValues];\n  //                   newInputValues[i] = event.target.value\n  //                   return newInputValues;\n  //                 });\n  //               }} \n  //             >\n  //               <option value=\"\"></option>\n  //               <option value=\"DAM\">DAM</option>\n  //               <option value=\"RH50\">RH50</option>\n  //             </select>\n  //             {\n  //                     i == 0 ? \n  //                     <div className=\"setAll\" onClick={() =>setAll(component)}>\n  //                         <ion-icon name=\"chevron-forward-outline\"></ion-icon>\n  //                     </div> : \"\"\n  //             }\n  //         </div>\n  //       );\n  //     }\n  //     return inputTags;\n  //   }\n\n  // Set All\n  // const setAll = (e) => {  \n  //     // const filled = temperature.filter((t) => t!==null)\n  //     // console.log(temperature[filled.length-1])\n  //     if(e===\"Temperature\"){\n  //         for(let i=0; i<numberOfDataSets; i++){\n  //             setTemperature((prevInputValues) => {\n  //                 const newInputValues = [...prevInputValues];\n  //                 newInputValues[i] = temperature[0]\n  //                 return newInputValues;\n  //             });\n  //         }\n  //     }else if(e===\"Conditioned\"){\n  //         alert(\"Cond\")\n  //     }\n  // }\n\n  // useEffect(() => {\n  //     const getInputTags = document.getElementsByClassName(\"temp_input\")\n  //     console.log(getInputTags.length)\n  //     // updates the Temperature Input tag\n  //     for(let i=0; i<temperature.length; i++){\n  //         getInputTags[i].value = temperature[0]\n  //     }\n  //     console.log(temperature)\n  // }, [temperature])\n  // const handleIncrement = () => {\n  //     setTemperature((prevCount) => prevCount + data);\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comp_header\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"ion-icon\", {\n          name: \"add-outline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }, this), \" \", component]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test_container_inputs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(TestCategoryComponent, \"zBv09eEXn2TM3Hz7ZfZ8UfMgU4M=\");\n_c = TestCategoryComponent;\nexport default TestCategoryComponent;\nvar _c;\n$RefreshReg$(_c, \"TestCategoryComponent\");","map":{"version":3,"names":["React","Fragment","useEffect","useRef","useState","jsxDEV","_jsxDEV","TestCategoryComponent","numberOfDataSets","data","type","component","_s","myInputRef","temperature","setTemperature","Array","fill","children","className","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/matship/frontend/src/Pages/UPLOAD/Tests/ISO527/Components/TestCategoryComponent.js"],"sourcesContent":["import React, { Fragment, useEffect, useRef } from 'react'\r\nimport { useState } from 'react';\r\n\r\nfunction TestCategoryComponent({numberOfDataSets,data,type, component}) {\r\n    // Create a ref\r\n    const myInputRef = useRef(null);\r\n    // Create Temperature Input Fields\r\n    // Array(numberOfDataSets).fill(null)\r\n    const [temperature, setTemperature] = useState(Array(numberOfDataSets).fill(null));\r\n    \r\n    // const createTemperatureTags = () => {\r\n    //     const inputTags = [];\r\n    //     for (let i = 0; i < numberOfDataSets; i++) {\r\n    //     inputTags.push(\r\n    //         <div key={i} className='test_data_box'>\r\n    //             <input className='temp_input'\r\n    //                 key={i} type=\"number\" onChange={(event) => {\r\n    //                     setTemperature((prevInputValues) => {\r\n    //                     const newInputValues = [...prevInputValues];\r\n    //                     newInputValues[i] = Number(event.target.value)\r\n    //                     return newInputValues;\r\n    //                     });\r\n    //                 }} \r\n    //             />\r\n    //             {\r\n    //                 i == 0 ? \r\n    //                 <div className=\"setAll\" onClick={() =>setAll(component)}>\r\n    //                     <ion-icon name=\"chevron-forward-outline\"></ion-icon>\r\n    //                 </div> : \"\"\r\n    //             }\r\n    //         </div>\r\n    //     );\r\n    //     }\r\n    //     return inputTags;\r\n    // };\r\n\r\n    // Create Conditioned Input Fields\r\n//   const [conditioned, setConditioned] = useState([]);\r\n//   const createConditionedTags = () => {\r\n//     const inputTags = [];\r\n//     for (let i = 0; i < numberOfDataSets; i++) {\r\n//       inputTags.push(\r\n//         <div key={i} className='test_data_box'>\r\n//             {/* <p>D{i+1}</p> */}\r\n//             <select \r\n//               key={i} type=\"number\" onChange={(event) => {\r\n//                 setConditioned((prevInputValues) => {\r\n//                   const newInputValues = [...prevInputValues];\r\n//                   newInputValues[i] = event.target.value\r\n//                   return newInputValues;\r\n//                 });\r\n//               }} \r\n//             >\r\n//               <option value=\"\"></option>\r\n//               <option value=\"DAM\">DAM</option>\r\n//               <option value=\"RH50\">RH50</option>\r\n//             </select>\r\n//             {\r\n//                     i == 0 ? \r\n//                     <div className=\"setAll\" onClick={() =>setAll(component)}>\r\n//                         <ion-icon name=\"chevron-forward-outline\"></ion-icon>\r\n//                     </div> : \"\"\r\n//             }\r\n//         </div>\r\n//       );\r\n//     }\r\n//     return inputTags;\r\n//   }\r\n\r\n   \r\n\r\n    // Set All\r\n    // const setAll = (e) => {  \r\n    //     // const filled = temperature.filter((t) => t!==null)\r\n    //     // console.log(temperature[filled.length-1])\r\n    //     if(e===\"Temperature\"){\r\n    //         for(let i=0; i<numberOfDataSets; i++){\r\n    //             setTemperature((prevInputValues) => {\r\n    //                 const newInputValues = [...prevInputValues];\r\n    //                 newInputValues[i] = temperature[0]\r\n    //                 return newInputValues;\r\n    //             });\r\n    //         }\r\n    //     }else if(e===\"Conditioned\"){\r\n    //         alert(\"Cond\")\r\n    //     }\r\n    // }\r\n\r\n    // useEffect(() => {\r\n    //     const getInputTags = document.getElementsByClassName(\"temp_input\")\r\n    //     console.log(getInputTags.length)\r\n    //     // updates the Temperature Input tag\r\n    //     for(let i=0; i<temperature.length; i++){\r\n    //         getInputTags[i].value = temperature[0]\r\n    //     }\r\n    //     console.log(temperature)\r\n    // }, [temperature])\r\n    // const handleIncrement = () => {\r\n    //     setTemperature((prevCount) => prevCount + data);\r\n    //   };\r\n\r\n  return (\r\n    <Fragment>\r\n\r\n        <div className=\"comp_header\">\r\n            <p>\r\n                <ion-icon name=\"add-outline\"></ion-icon> {component}\r\n            </p>\r\n            \r\n        </div>\r\n\r\n        <div className=\"test_container_inputs\">\r\n            {/* {\r\n                component === \"Temperature\" ?\r\n                    createTemperatureTags()\r\n                : (\r\n                    component === \"Conditioned\" ? \r\n                        \"createConditionedTags()\" : \r\n                        (\r\n                            \"createTemperatureTags()\"\r\n                        )\r\n                )\r\n                \r\n            } */}\r\n       </div>\r\n\r\n\r\n\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default TestCategoryComponent"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,qBAAqBA,CAAC;EAACC,gBAAgB;EAACC,IAAI;EAACC,IAAI;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACpE;EACA,MAAMC,UAAU,GAAGV,MAAM,CAAC,IAAI,CAAC;EAC/B;EACA;EACA,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAACY,KAAK,CAACR,gBAAgB,CAAC,CAACS,IAAI,CAAC,IAAI,CAAC,CAAC;;EAElF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAII;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEF,oBACEX,OAAA,CAACL,QAAQ;IAAAiB,QAAA,gBAELZ,OAAA;MAAKa,SAAS,EAAC,aAAa;MAAAD,QAAA,eACxBZ,OAAA;QAAAY,QAAA,gBACIZ,OAAA;UAAUc,IAAI,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC,KAAC,EAACb,SAAS;MAAA;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEH,CAAC,eAENlB,OAAA;MAAKa,SAAS,EAAC;IAAuB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAalC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAIC,CAAC;AAEf;AAACZ,EAAA,CA/HQL,qBAAqB;AAAAkB,EAAA,GAArBlB,qBAAqB;AAiI9B,eAAeA,qBAAqB;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}