{"ast":null,"code":"var _jsxFileName = \"E:\\\\matship\\\\frontend\\\\src\\\\Pages\\\\UPLOAD\\\\Tests\\\\TestComponents\\\\Table.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { testStandardInfo } from '../../../../features/uploadSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Table({\n  sendToParent,\n  sno,\n  x_axis,\n  y_axis,\n  index,\n  plotClicked\n}) {\n  _s();\n  const [data, setData] = useState([{\n    dataset: 0,\n    specimens: 0,\n    x_axis: {\n      name: \"\",\n      units: \"\",\n      value: []\n    },\n    y_axis: {\n      name: \"\",\n      units: \"\",\n      value: []\n    }\n  }]);\n  const [x_axisValue, setX_axisValue] = useState([]);\n  const [y_axisValue, setY_axisValue] = useState([]);\n  const [tableData, setTableData] = useState([['Column 1', 'Column 2'] // Initial row\n  ]);\n\n  const handlePaste = event => {\n    const pastedText = event.clipboardData.getData('text/plain');\n    if (!pastedText) return;\n    // Determine target column based on click position\n    const targetColumn = event.target.cellIndex; // Get index of clicked cell\n    console.log(targetColumn, pastedText);\n    // Split data into rows and columns, preserving empty columns\n    const rows = pastedText.split('\\n').map(line => line.trim()).filter(line => line).map(line => line.split('\\t'));\n    console.log(\"Rowssssss\", rows);\n    let x = [],\n      y = [];\n    for (let i = 0; i < rows.length; i++) {\n      console.log(rows[i][0]);\n      x.push(rows[i][0]);\n      y.push(rows[i][1]);\n      setX_axisValue(p => [...p, rows[i][0]]);\n      setY_axisValue(p => [...p, rows[i][1]]);\n    }\n    console.log(x_axisValue);\n    setData([{\n      dataset: index,\n      specimens: sno,\n      x_axis: {\n        name: x_axis,\n        units: \"\",\n        value: x\n      },\n      y_axis: {\n        name: y_axis,\n        units: \"\",\n        value: y\n      }\n    }]);\n    // Update table data, correctly placing values in target column\n    setTableData(prevData => prevData.concat(rows));\n  };\n  console.log(\"engs\", plotClicked);\n  if (plotClicked) {\n    console.log(\"yteasssssssssss\");\n  }\n  useEffect(() => {\n    if (plotClicked === true) {\n      if (x_axisValue.length > 1) sendToParent(data, index, sno);\n    }\n  }, [plotClicked]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      onPaste: handlePaste,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: x_axis\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: y_axis\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        className: \"table_body\",\n        children: tableData.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"X Axis\",\n              value: row[0],\n              id: \"\",\n              placeholder: \"Paste your data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"Y Axis\",\n              value: row[1],\n              id: \"\",\n              placeholder: \"Paste your data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this), plotClicked ? \"Hiii\" : \"Noo\"]\n  }, void 0, true);\n}\n_s(Table, \"IJmZ3IVivCcEVy5hW+NipYu+sWE=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useEffect","useState","testStandardInfo","useDispatch","useSelector","jsxDEV","_jsxDEV","Fragment","_Fragment","Table","sendToParent","sno","x_axis","y_axis","index","plotClicked","_s","data","setData","dataset","specimens","name","units","value","x_axisValue","setX_axisValue","y_axisValue","setY_axisValue","tableData","setTableData","handlePaste","event","pastedText","clipboardData","getData","targetColumn","target","cellIndex","console","log","rows","split","map","line","trim","filter","x","y","i","length","push","p","prevData","concat","children","onPaste","fileName","_jsxFileName","lineNumber","columnNumber","className","row","type","id","placeholder","_c","$RefreshReg$"],"sources":["E:/matship/frontend/src/Pages/UPLOAD/Tests/TestComponents/Table.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport { testStandardInfo } from '../../../../features/uploadSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nfunction Table({ sendToParent ,sno, x_axis, y_axis,  index, plotClicked }) {\r\n    const [data, setData] = useState([{\r\n        dataset:0,\r\n        specimens:0,\r\n        x_axis:{\r\n            name:\"\",\r\n            units:\"\",\r\n            value:[]\r\n        },\r\n        y_axis:{\r\n            name:\"\",\r\n            units:\"\",\r\n            value:[]\r\n        }\r\n    }])\r\n\r\n    const [x_axisValue, setX_axisValue] = useState([])\r\n    const [y_axisValue, setY_axisValue] = useState([])\r\n\r\n    const [tableData, setTableData] = useState([\r\n      ['Column 1', 'Column 2'], // Initial row\r\n    ]);\r\n\r\n    const handlePaste = (event) => {  \r\n      \r\n      const pastedText = event.clipboardData.getData('text/plain');\r\n      if (!pastedText) return;\r\n      // Determine target column based on click position\r\n      const targetColumn = event.target.cellIndex; // Get index of clicked cell\r\n      console.log(targetColumn, pastedText)\r\n      // Split data into rows and columns, preserving empty columns\r\n      const rows = pastedText\r\n        .split('\\n')\r\n        .map((line) => line.trim())\r\n        .filter((line) => line)\r\n        .map((line) => line.split('\\t'));\r\n        console.log(\"Rowssssss\", rows)\r\n        let x=[], y=[]\r\n        for(let i=0; i<rows.length; i++)  {\r\n          console.log(rows[i][0])\r\n          x.push(rows[i][0])\r\n          y.push(rows[i][1])\r\n          setX_axisValue((p) => [...p, rows[i][0]])\r\n          setY_axisValue((p) => [...p, rows[i][1]])\r\n        }\r\n        console.log(x_axisValue)\r\n        setData([\r\n          {\r\n            dataset:index,\r\n            specimens:sno,\r\n            x_axis:{\r\n                name:x_axis,\r\n                units:\"\",\r\n                value:x\r\n            },\r\n            y_axis:{\r\n                name:y_axis,\r\n                units:\"\",\r\n                value:y\r\n            }\r\n          } \r\n        ]);\r\n      // Update table data, correctly placing values in target column\r\n      setTableData((prevData) => prevData.concat(rows));\r\n\r\n\r\n    };\r\n    console.log(\"engs\", plotClicked)\r\n\r\n    if(plotClicked){\r\n      console.log(\"yteasssssssssss\")\r\n    }\r\n    useEffect(() => {\r\n      if(plotClicked === true){\r\n        if(x_axisValue.length >1)\r\n        sendToParent(data, index, sno)\r\n      }\r\n    }, [plotClicked])\r\n\r\n  return (\r\n    <>\r\n    {/* {\r\n      NumberOf_Specimens\r\n    } */}\r\n    <table onPaste={handlePaste}>\r\n      <thead>\r\n        <tr>\r\n          <th>{x_axis}</th>\r\n          <th>{y_axis}</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody className='table_body'>\r\n        {tableData.map((row, index) => (\r\n          <tr key={index}>\r\n            <td><input type=\"number\" name='X Axis' value={row[0]} id=\"\" placeholder='Paste your data' /></td>\r\n            <td><input type=\"number\" name='Y Axis' value={row[1]} id=\"\" placeholder='Paste your data'/></td>\r\n            {/* <td>{row[1]}</td> */}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n    {\r\n      plotClicked ? \"Hiii\" : \"Noo\"\r\n    }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Table\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}