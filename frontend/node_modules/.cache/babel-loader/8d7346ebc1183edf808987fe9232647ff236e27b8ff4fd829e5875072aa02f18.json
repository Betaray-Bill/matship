{"ast":null,"code":"var _jsxFileName = \"E:\\\\matship\\\\frontend\\\\src\\\\Pages\\\\UPLOAD\\\\Tests\\\\TestComponents\\\\Table.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { testStandardInfo } from '../../../../features/uploadSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Table({\n  sno,\n  x_axis,\n  y_axis,\n  ManualDataSet,\n  index,\n  excelData,\n  NumberOf_Specimens\n}) {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    testStandard\n  } = useSelector(state => state.uploadData);\n  const [x_axisValue, setX_axisValue] = useState([]);\n  const [y_axisValue, setY_axisValue] = useState([]);\n  const [tableData, setTableData] = useState([['Column 1', 'Column 2'] // Initial row\n  ]);\n\n  const handlePaste = event => {\n    const pastedText = event.clipboardData.getData('text/plain');\n    if (!pastedText) return;\n    // Determine target column based on click position\n    const targetColumn = event.target.cellIndex; // Get index of clicked cell\n    console.log(targetColumn, pastedText);\n    // Split data into rows and columns, preserving empty columns\n    const rows = pastedText.split('\\n').map(line => line.trim()).filter(line => line).map(line => line.split('\\t'));\n    console.log(\"Rowssssss\", rows);\n    let x = rows.map(element => {\n      return element[0];\n    });\n    let y = rows.map(element => {\n      return element[1];\n    });\n    console.log(\"X\", x);\n    // Update table data, correctly placing values in target column\n    setTableData(prevData => prevData.concat(rows));\n    if (event.target.name === \"Y Axis\") {\n      console.log(\"Y\");\n      setY_axisValue([...y_axisValue, y]);\n    }\n    if (event.target.name === \"X Axis\") {\n      console.log(\"X\");\n      setX_axisValue([...x_axisValue, x]);\n    }\n  };\n  useEffect(() => {\n    console.log(\"X values\", x_axisValue), console.log(\"Y Vlaue\", y_axisValue);\n  }, [x_axisValue, y_axisValue]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      onPaste: handlePaste,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: x_axis\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: y_axis\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        className: \"table_body\",\n        children: tableData.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"X Axis\",\n              value: row[0],\n              id: \"\",\n              placeholder: \"Paste your data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: row[1],\n              id: \"\",\n              placeholder: \"Paste your data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(Table, \"Tlm8SmAOFHOTMFP0YVlRj6ImziA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useEffect","useState","testStandardInfo","useDispatch","useSelector","jsxDEV","_jsxDEV","Fragment","_Fragment","Table","sno","x_axis","y_axis","ManualDataSet","index","excelData","NumberOf_Specimens","_s","dispatch","testStandard","state","uploadData","x_axisValue","setX_axisValue","y_axisValue","setY_axisValue","tableData","setTableData","handlePaste","event","pastedText","clipboardData","getData","targetColumn","target","cellIndex","console","log","rows","split","map","line","trim","filter","x","element","y","prevData","concat","name","children","onPaste","fileName","_jsxFileName","lineNumber","columnNumber","className","row","type","value","id","placeholder","_c","$RefreshReg$"],"sources":["E:/matship/frontend/src/Pages/UPLOAD/Tests/TestComponents/Table.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport { testStandardInfo } from '../../../../features/uploadSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nfunction Table({ sno, x_axis, y_axis, ManualDataSet, index, excelData, NumberOf_Specimens }) {\r\n    const dispatch = useDispatch()\r\n    const {testStandard} = useSelector(state => state.uploadData)\r\n    const [x_axisValue, setX_axisValue] = useState([])\r\n    const [y_axisValue, setY_axisValue] = useState([])\r\n\r\n    const [tableData, setTableData] = useState([\r\n      ['Column 1', 'Column 2'], // Initial row\r\n    ]);\r\n\r\n    const handlePaste = (event) => {\r\n      const pastedText = event.clipboardData.getData('text/plain');\r\n      if (!pastedText) return;\r\n      // Determine target column based on click position\r\n      const targetColumn = event.target.cellIndex; // Get index of clicked cell\r\n        console.log(targetColumn, pastedText)\r\n      // Split data into rows and columns, preserving empty columns\r\n      const rows = pastedText\r\n        .split('\\n')\r\n        .map((line) => line.trim())\r\n        .filter((line) => line)\r\n        .map((line) => line.split('\\t'));\r\n        console.log(\"Rowssssss\", rows)\r\n      let x = rows.map(element => {\r\n            return element[0]\r\n      });\r\n      let y = rows.map(element => {\r\n            return element[1]\r\n      });\r\n      console.log(\"X\", x)\r\n      // Update table data, correctly placing values in target column\r\n      setTableData((prevData) => prevData.concat(rows));\r\n\r\n      if(event.target.name === \"Y Axis\"){\r\n        console.log(\"Y\");\r\n        setY_axisValue([...y_axisValue, y])\r\n      }\r\n      if(event.target.name === \"X Axis\"){\r\n        console.log(\"X\");\r\n        setX_axisValue([...x_axisValue, x])\r\n      }\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n      console.log(\"X values\", x_axisValue),\r\n      console.log(\"Y Vlaue\", y_axisValue)\r\n    }, [x_axisValue, y_axisValue])\r\n\r\n  return (\r\n    <>\r\n    {/* {\r\n      NumberOf_Specimens\r\n    } */}\r\n    <table onPaste={handlePaste}>\r\n      <thead>\r\n        <tr>\r\n          <th>{x_axis}</th>\r\n          <th>{y_axis}</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody className='table_body'>\r\n        {tableData.map((row, index) => (\r\n          <tr key={index}>\r\n            <td><input type=\"number\" name='X Axis' value={row[0]} id=\"\" placeholder='Paste your data' /></td>\r\n            <td><input type=\"number\" value={row[1]} id=\"\" placeholder='Paste your data'/></td>\r\n            {/* <td>{row[1]}</td> */}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Table\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}