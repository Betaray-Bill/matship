{"ast":null,"code":"var _jsxFileName = \"E:\\\\matship\\\\frontend\\\\src\\\\Pages\\\\UPLOAD\\\\Tests\\\\TestComponents\\\\Table.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { testStandardInfo } from '../../../../features/uploadSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Table({\n  sno,\n  x_axis,\n  y_axis,\n  handleXAxisUpdate,\n  handleYAxisUpdate,\n  ManualDataSet,\n  index,\n  excelData,\n  NumberOf_Specimens\n}) {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    testStandard\n  } = useSelector(state => state.uploadData);\n  const [x_axisValue, setX_axisValue] = useState([]);\n  const [y_axisValue, setY_axisValue] = useState([]);\n  const [tableData, setTableData] = useState([['Column 1', 'Column 2'] // Initial row\n  ]);\n\n  const handlePaste = event => {\n    const pastedText = event.clipboardData.getData('text/plain');\n    if (!pastedText) return;\n    // Determine target column based on click position\n    const targetColumn = event.target.cellIndex; // Get index of clicked cell\n    console.log(targetColumn, pastedText);\n    // Split data into rows and columns, preserving empty columns\n    const rows = pastedText.split('\\n').map(line => line.trim()).filter(line => line).map(line => line.split('\\t'));\n    console.log(\"Rowssssss\", rows);\n    for (let i = 0; i < rows.length; i++) {\n      console.log(rows[i][0]);\n      setX_axisValue(p => [...p, rows[i][0]]);\n      setY_axisValue(p => [...p, rows[i][1]]);\n      console.log(x_axisValue);\n    }\n    console.log(x_axisValue);\n    // Update table data, correctly placing values in target column\n    setTableData(prevData => prevData.concat(rows));\n    console.log(\"1\");\n    console.log(x_axisValue, y_axisValue);\n    handleXAxisUpdate(x_axisValue);\n    handleYAxisUpdate(y_axisValue);\n    console.log(\"2\");\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      onPaste: handlePaste,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: x_axis\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: y_axis\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        className: \"table_body\",\n        children: tableData.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"X Axis\",\n              value: row[0],\n              id: \"\",\n              placeholder: \"Paste your data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"Y Axis\",\n              value: row[1],\n              id: \"\",\n              placeholder: \"Paste your data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(Table, \"WaNFdLNIccB9/ekE+5VF33mCJlI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useEffect","useState","testStandardInfo","useDispatch","useSelector","jsxDEV","_jsxDEV","Fragment","_Fragment","Table","sno","x_axis","y_axis","handleXAxisUpdate","handleYAxisUpdate","ManualDataSet","index","excelData","NumberOf_Specimens","_s","dispatch","testStandard","state","uploadData","x_axisValue","setX_axisValue","y_axisValue","setY_axisValue","tableData","setTableData","handlePaste","event","pastedText","clipboardData","getData","targetColumn","target","cellIndex","console","log","rows","split","map","line","trim","filter","i","length","p","prevData","concat","children","onPaste","fileName","_jsxFileName","lineNumber","columnNumber","className","row","type","name","value","id","placeholder","_c","$RefreshReg$"],"sources":["E:/matship/frontend/src/Pages/UPLOAD/Tests/TestComponents/Table.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport { testStandardInfo } from '../../../../features/uploadSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nfunction Table({ sno, x_axis, y_axis,handleXAxisUpdate, handleYAxisUpdate, ManualDataSet, index, excelData, NumberOf_Specimens }) {\r\n    const dispatch = useDispatch()\r\n    const {testStandard} = useSelector(state => state.uploadData)\r\n    const [x_axisValue, setX_axisValue] = useState([])\r\n    const [y_axisValue, setY_axisValue] = useState([])\r\n\r\n    const [tableData, setTableData] = useState([\r\n      ['Column 1', 'Column 2'], // Initial row\r\n    ]);\r\n\r\n    const handlePaste = (event) => {  \r\n      \r\n      const pastedText = event.clipboardData.getData('text/plain');\r\n      if (!pastedText) return;\r\n      // Determine target column based on click position\r\n      const targetColumn = event.target.cellIndex; // Get index of clicked cell\r\n      console.log(targetColumn, pastedText)\r\n      // Split data into rows and columns, preserving empty columns\r\n      const rows = pastedText\r\n        .split('\\n')\r\n        .map((line) => line.trim())\r\n        .filter((line) => line)\r\n        .map((line) => line.split('\\t'));\r\n        console.log(\"Rowssssss\", rows)\r\n\r\n        for(let i=0; i<rows.length; i++)  {\r\n          console.log(rows[i][0])\r\n          setX_axisValue((p) => [...p, rows[i][0]])\r\n          setY_axisValue((p) => [...p, rows[i][1]])\r\n          console.log(x_axisValue)\r\n        }\r\n        console.log(x_axisValue)\r\n      // Update table data, correctly placing values in target column\r\n      setTableData((prevData) => prevData.concat(rows));\r\n      console.log(\"1\")\r\n        console.log(x_axisValue, y_axisValue)\r\n      handleXAxisUpdate(x_axisValue);\r\n      handleYAxisUpdate(y_axisValue);\r\n      console.log(\"2\")\r\n    };\r\n  return (\r\n    <>\r\n    {/* {\r\n      NumberOf_Specimens\r\n    } */}\r\n    <table onPaste={handlePaste}>\r\n      <thead>\r\n        <tr>\r\n          <th>{x_axis}</th>\r\n          <th>{y_axis}</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody className='table_body'>\r\n        {tableData.map((row, index) => (\r\n          <tr key={index}>\r\n            <td><input type=\"number\" name='X Axis' value={row[0]} id=\"\" placeholder='Paste your data' /></td>\r\n            <td><input type=\"number\" name='Y Axis' value={row[1]} id=\"\" placeholder='Paste your data'/></td>\r\n            {/* <td>{row[1]}</td> */}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Table\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}