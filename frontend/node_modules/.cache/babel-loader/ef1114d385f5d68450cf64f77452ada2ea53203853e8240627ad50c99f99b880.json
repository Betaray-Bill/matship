{"ast":null,"code":"var _jsxFileName = \"E:\\\\matship\\\\frontend\\\\src\\\\Pages\\\\UPLOAD\\\\Tests\\\\TestComponents\\\\Table.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Table({\n  sno,\n  x_axis,\n  y_axis,\n  index,\n  excelData\n}) {\n  const handlePaste = async (e, rowIndex, axis, i, index) => {\n    // const n = dynamicArray;\n    // console.log(dynamicArray)\n    // const clipboardData = e.clipboardData || window.clipboardData;\n    // const pastedData = clipboardData.getData('text').split('\\n');\n    // const rows = pastedData.length\n    // console.log(\"Pasted\")\n    // await handleUserInput(rows)\n    // pastedData.forEach((ind, inde) => {\n    //   console.table(index+1, i+1, axis, rowIndex+1, Number(ind))\n    //   if(axis === 'x_axis'){\n    //     console.log(ind)\n    //     insertOrUpdateAtIndexForPasting(n[index][i][i][0], inde, Number(ind))\n    //   }else{\n    //     insertOrUpdateAtIndexForPasting(n[index][i][i][1], inde, Number(ind))\n    //     console.log(ind)\n    //   }\n    //   console.log(n[index][i][i])\n    // })\n    // console.log(n)\n    // await setDynamicArray(n)\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: x_axis[index]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: y_axis[index]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: excelData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              onChange: e => {\n                console.log(\"sno\", sno, \":\", e.target.value);\n              }\n              // value={dynamicArray[index][i][i][0][rowIndex]}\n              // onPaste={(e) => handlePaste(e,rowIndex, 'x_axis', i, index)}\n              // onChange={(e) => handleInputChange(e, rowIndex, 'x_axis', i, index)}\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 27\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\"\n              // value={dynamicArray[index][i][i][1][rowIndex]}\n              // onPaste={(e) => handlePaste(e,rowIndex, 'y_axis', i, index)}\n              // onChange={(e) => handleInputChange(e, rowIndex, 'y_axis', i, index)}\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 27\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this)]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 23\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","Table","sno","x_axis","y_axis","index","excelData","handlePaste","e","rowIndex","axis","i","children","border","fileName","_jsxFileName","lineNumber","columnNumber","map","row","type","onChange","console","log","target","value","_c","$RefreshReg$"],"sources":["E:/matship/frontend/src/Pages/UPLOAD/Tests/TestComponents/Table.js"],"sourcesContent":["import React from 'react'\r\n\r\nfunction Table({ sno, x_axis, y_axis, index, excelData }) {\r\n\r\n\r\n    const handlePaste = async(e, rowIndex, axis , i, index) => {\r\n        // const n = dynamicArray;\r\n        // console.log(dynamicArray)\r\n        // const clipboardData = e.clipboardData || window.clipboardData;\r\n        // const pastedData = clipboardData.getData('text').split('\\n');\r\n        // const rows = pastedData.length\r\n        // console.log(\"Pasted\")\r\n        // await handleUserInput(rows)\r\n        // pastedData.forEach((ind, inde) => {\r\n        //   console.table(index+1, i+1, axis, rowIndex+1, Number(ind))\r\n        //   if(axis === 'x_axis'){\r\n        //     console.log(ind)\r\n        //     insertOrUpdateAtIndexForPasting(n[index][i][i][0], inde, Number(ind))\r\n        //   }else{\r\n        //     insertOrUpdateAtIndexForPasting(n[index][i][i][1], inde, Number(ind))\r\n        //     console.log(ind)\r\n        //   }\r\n        //   console.log(n[index][i][i])\r\n        // })\r\n        // console.log(n)\r\n        // await setDynamicArray(n)\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n        <table border=\"1\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>{x_axis[index]}</th>\r\n                      <th>{y_axis[index]}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {excelData.map((row, rowIndex) => (\r\n                      <tr key={rowIndex}>\r\n                        <td>\r\n                          <input\r\n                            type=\"number\"\r\n                            onChange={(e) => {\r\n                              console.log(\"sno\", sno ,\":\", e.target.value)\r\n                            }}\r\n                            // value={dynamicArray[index][i][i][0][rowIndex]}\r\n                            // onPaste={(e) => handlePaste(e,rowIndex, 'x_axis', i, index)}\r\n                            // onChange={(e) => handleInputChange(e, rowIndex, 'x_axis', i, index)}\r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <input\r\n                            type=\"number\"\r\n                            // value={dynamicArray[index][i][i][1][rowIndex]}\r\n                            // onPaste={(e) => handlePaste(e,rowIndex, 'y_axis', i, index)}\r\n                            // onChange={(e) => handleInputChange(e, rowIndex, 'y_axis', i, index)}\r\n                          />\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Table"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEzB,SAASC,KAAKA,CAAC;EAAEC,GAAG;EAAEC,MAAM;EAAEC,MAAM;EAAEC,KAAK;EAAEC;AAAU,CAAC,EAAE;EAGtD,MAAMC,WAAW,GAAG,MAAAA,CAAMC,CAAC,EAAEC,QAAQ,EAAEC,IAAI,EAAGC,CAAC,EAAEN,KAAK,KAAK;IACvD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACH;EAMH,oBACEP,OAAA,CAAAE,SAAA;IAAAY,QAAA,eACId,OAAA;MAAOe,MAAM,EAAC,GAAG;MAAAD,QAAA,gBACPd,OAAA;QAAAc,QAAA,eACEd,OAAA;UAAAc,QAAA,gBACEd,OAAA;YAAAc,QAAA,EAAKT,MAAM,CAACE,KAAK;UAAC;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACxBnB,OAAA;YAAAc,QAAA,EAAKR,MAAM,CAACC,KAAK;UAAC;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACRnB,OAAA;QAAAc,QAAA,EACGN,SAAS,CAACY,GAAG,CAAC,CAACC,GAAG,EAAEV,QAAQ,kBAC3BX,OAAA;UAAAc,QAAA,gBACEd,OAAA;YAAAc,QAAA,eACEd,OAAA;cACEsB,IAAI,EAAC,QAAQ;cACbC,QAAQ,EAAGb,CAAC,IAAK;gBACfc,OAAO,CAACC,GAAG,CAAC,KAAK,EAAErB,GAAG,EAAE,GAAG,EAAEM,CAAC,CAACgB,MAAM,CAACC,KAAK,CAAC;cAC9C;cACA;cACA;cACA;YAAA;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACLnB,OAAA;YAAAc,QAAA,eACEd,OAAA;cACEsB,IAAI,EAAC;cACL;cACA;cACA;YAAA;cAAAN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC;QAAA,GAnBER,QAAQ;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAoBb,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC,gBAClB,CAAC;AAEP;AAACS,EAAA,GAnEQzB,KAAK;AAqEd,eAAeA,KAAK;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}