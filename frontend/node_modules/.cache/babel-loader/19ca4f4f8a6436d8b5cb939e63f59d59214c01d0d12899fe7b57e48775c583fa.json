{"ast":null,"code":"var _jsxFileName = \"E:\\\\matship\\\\frontend\\\\src\\\\Pages\\\\UPLOAD\\\\Tests\\\\TestComponents\\\\Table.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Table({\n  sno,\n  x_axis,\n  y_axis,\n  index,\n  excelData,\n  dynamicArray\n}) {\n  function insertOrUpdateAtIndexForPasting(myArray, indexToInsert, newValue) {\n    if (indexToInsert >= 0 && indexToInsert < myArray.length) {\n      myArray.splice(indexToInsert, 1, newValue);\n      console.log(myArray);\n    } else {\n      myArray.splice(myArray.length, 0, newValue);\n    }\n  }\n  const handlePaste = async (e, rowIndex, axis, i, index) => {\n    const n = dynamicArray;\n    console.log(dynamicArray);\n    const clipboardData = e.clipboardData || window.clipboardData;\n    const pastedData = clipboardData.getData('text').split('\\n');\n    const rows = pastedData.length;\n    console.log(\"Pasted\");\n    await handleUserInput(rows);\n    pastedData.forEach((ind, inde) => {\n      console.table(index + 1, i + 1, axis, rowIndex + 1, Number(ind));\n      if (axis === 'x_axis') {\n        console.log(ind);\n        insertOrUpdateAtIndexForPasting(n[index][i][i][0], inde, Number(ind));\n      } else {\n        insertOrUpdateAtIndexForPasting(n[index][i][i][1], inde, Number(ind));\n        console.log(ind);\n      }\n      console.log(n[index][i][i]);\n    });\n    console.log(n);\n    await setDynamicArray(n);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: x_axis[index]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: y_axis[index]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: excelData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              onChange: e => {\n                console.log(\"sno\", sno, \":\", e.target.value);\n              }\n              // value={dynamicArray[index][i][i][0][rowIndex]}\n              ,\n              onPaste: e => handlePaste(e, rowIndex, 'x_axis', i, index)\n              // onChange={(e) => handleInputChange(e, rowIndex, 'x_axis', i, index)}\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 27\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\"\n              // value={dynamicArray[index][i][i][1][rowIndex]}\n              // onPaste={(e) => handlePaste(e,rowIndex, 'y_axis', i, index)}\n              // onChange={(e) => handleInputChange(e, rowIndex, 'y_axis', i, index)}\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 27\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this)]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 23\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","Table","sno","x_axis","y_axis","index","excelData","dynamicArray","insertOrUpdateAtIndexForPasting","myArray","indexToInsert","newValue","length","splice","console","log","handlePaste","e","rowIndex","axis","i","n","clipboardData","window","pastedData","getData","split","rows","handleUserInput","forEach","ind","inde","table","Number","setDynamicArray","children","border","fileName","_jsxFileName","lineNumber","columnNumber","map","row","type","onChange","target","value","onPaste","_c","$RefreshReg$"],"sources":["E:/matship/frontend/src/Pages/UPLOAD/Tests/TestComponents/Table.js"],"sourcesContent":["import React from 'react'\r\n\r\nfunction Table({ sno, x_axis, y_axis, index, excelData, dynamicArray }) {\r\n\r\n\r\n  function insertOrUpdateAtIndexForPasting(myArray, indexToInsert, newValue) {\r\n    if (indexToInsert >= 0 && indexToInsert < myArray.length) {\r\n      myArray.splice(indexToInsert, 1, newValue);\r\n      console.log(myArray)\r\n    } else {\r\n      myArray.splice(myArray.length, 0, newValue);\r\n    }\r\n  }\r\n\r\n    const handlePaste = async(e, rowIndex, axis , i, index) => {\r\n        const n = dynamicArray;\r\n        console.log(dynamicArray)\r\n        const clipboardData = e.clipboardData || window.clipboardData;\r\n        const pastedData = clipboardData.getData('text').split('\\n');\r\n        const rows = pastedData.length\r\n        console.log(\"Pasted\")\r\n        await handleUserInput(rows)\r\n        pastedData.forEach((ind, inde) => {\r\n          console.table(index+1, i+1, axis, rowIndex+1, Number(ind))\r\n          if(axis === 'x_axis'){\r\n            console.log(ind)\r\n            insertOrUpdateAtIndexForPasting(n[index][i][i][0], inde, Number(ind))\r\n          }else{\r\n            insertOrUpdateAtIndexForPasting(n[index][i][i][1], inde, Number(ind))\r\n            console.log(ind)\r\n          }\r\n          console.log(n[index][i][i])\r\n        })\r\n        console.log(n)\r\n        await setDynamicArray(n)\r\n\r\n\r\n    };\r\n\r\n  return (\r\n    <>\r\n        <table border=\"1\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>{x_axis[index]}</th>\r\n                      <th>{y_axis[index]}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {excelData.map((row, rowIndex) => (\r\n                      <tr key={rowIndex}>\r\n                        <td>\r\n                          <input\r\n                            type=\"number\"\r\n                            onChange={(e) => {\r\n                              console.log(\"sno\", sno ,\":\", e.target.value)\r\n                            }}\r\n                            // value={dynamicArray[index][i][i][0][rowIndex]}\r\n                            onPaste={(e) => handlePaste(e,rowIndex, 'x_axis', i, index)}\r\n                            // onChange={(e) => handleInputChange(e, rowIndex, 'x_axis', i, index)}\r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <input\r\n                            type=\"number\"\r\n                            // value={dynamicArray[index][i][i][1][rowIndex]}\r\n                            // onPaste={(e) => handlePaste(e,rowIndex, 'y_axis', i, index)}\r\n                            // onChange={(e) => handleInputChange(e, rowIndex, 'y_axis', i, index)}\r\n                          />\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Table"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}