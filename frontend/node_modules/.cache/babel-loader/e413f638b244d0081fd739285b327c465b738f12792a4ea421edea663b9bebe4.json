{"ast":null,"code":"var _jsxFileName = \"E:\\\\matship\\\\frontend\\\\src\\\\Pages\\\\UPLOAD\\\\Tests\\\\TestComponents\\\\Chart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nfunction Chart({\n  plotData,\n  DataSet\n}) {\n  _s();\n  const [plot, setPlot] = useState([]);\n  const dataForPlot = async () => {\n    // const existingIndex = plotData.filter((item) => {\n    //   return item.dataset === DataSet\n    // })\n\n    // console.log(existingIndex)\n    // setPlot(existingIndex)\n    console.log(plotData);\n  };\n  useEffect(() => {\n    dataForPlot();\n  }, [plot]);\n  const data = {\n    datasets: [{\n      label: 'Dataset 1',\n      data: [{\n        x: 10,\n        y: 65\n      }, {\n        x: 25,\n        y: 59\n      }, {\n        x: 40,\n        y: 80\n      }],\n      borderColor: 'blue',\n      backgroundColor: 'rgba(0, 150, 255, 0.2)'\n    }, {\n      label: 'Dataset 2',\n      data: [{\n        x: 5,\n        y: 28\n      }, {\n        x: 15,\n        y: 48\n      }, {\n        x: 35,\n        y: 40\n      }],\n      borderColor: 'green',\n      backgroundColor: 'rgba(0, 255, 0, 0.2)'\n    }\n    // ... other datasets\n    ]\n  };\n\n  const options = {\n    scales: {\n      x: {\n        type: 'linear' // Ensure x-axis treats labels as numerical values\n      }\n    }\n  };\n  // const data = {\n  //   labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\n  //   datasets: [\n  //     {\n  //       label: \"First dataset\",\n  //       data: [33, 53, 85, 41, 44, 65],\n  //       fill: true,\n  //       backgroundColor: \"rgba(75,192,192,0.2)\",\n  //       borderColor: \"rgba(75,192,192,1)\"\n  //     },\n  //     {\n  //       label: \"Second dataset\",\n  //       data: [33, 25, 35, 51, 54, 76],\n  //       fill: false,\n  //       borderColor: \"#742774\"\n  //     }\n  //   ]\n  // };\n  // console.log(\"Dat for plot\", data)\n\n  // const options = {\n  //   responsive: true,\n  //   interaction: {\n  //     mode: 'index',\n  //     intersect: false,\n  //   },\n  //   stacked: false,\n  //   plugins: {\n  //     title: {\n  //       display: true,\n  //       text: 'Chart.js Line Chart - Multi Axis',\n  //     },\n  //   },\n  //   scales: {\n  //     y: {\n  //       type: 'linear',\n  //       display: true,\n  //       position: 'left',\n  //     },\n  //     y1: {\n  //       type: 'linear',\n  //       display: true,\n  //       position: 'right',\n  //       grid: {\n  //         drawOnChartArea: false,\n  //       },\n  //     },\n  //   },\n  // };\n\n  // const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n\n  //   labels,\n  //   datasets: [\n  //     {\n  //       label: 'Dataset 1',\n  //       data: plot.map((e) => e.x_axis),\n  //       borderColor: 'rgb(255, 99, 132)',\n  //       backgroundColor: 'rgba(255, 99, 132, 0.5)',\n  //       yAxisID: 'y',\n  //     },\n  //     // {\n  //     //   label: 'Dataset 2',\n  //     //   // data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\n  //     //   borderColor: 'rgb(53, 162, 235)',\n  //     //   backgroundColor: 'rgba(53, 162, 235, 0.5)',\n  //     //   yAxisID: 'y1',\n  //     // },\n  //   ],\n  // };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n_s(Chart, \"sZ9u5mLXSx5hgB5smZiGgeduM0s=\");\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","useEffect","useState","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","jsxDEV","_jsxDEV","register","plotData","DataSet","_s","plot","setPlot","dataForPlot","console","log","data","datasets","label","x","y","borderColor","backgroundColor","options","scales","type","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/matship/frontend/src/Pages/UPLOAD/Tests/TestComponents/Chart.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nfunction Chart({plotData, DataSet}) {\r\n\r\n  const [plot, setPlot] = useState([])\r\n  const dataForPlot = async() => {\r\n      // const existingIndex = plotData.filter((item) => {\r\n      //   return item.dataset === DataSet\r\n      // })\r\n\r\n      // console.log(existingIndex)\r\n      // setPlot(existingIndex)\r\n      console.log(plotData)\r\n  }\r\n\r\n  useEffect(() => {\r\n    dataForPlot()\r\n  }, [plot])\r\n\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        label: 'Dataset 1',\r\n        data: [{ x: 10, y: 65 }, { x: 25, y: 59 }, { x: 40, y: 80 }],\r\n        borderColor: 'blue',\r\n        backgroundColor: 'rgba(0, 150, 255, 0.2)',\r\n      },\r\n      {\r\n        label: 'Dataset 2',\r\n        data: [{ x: 5, y: 28 }, { x: 15, y: 48 }, { x: 35, y: 40 }],\r\n        borderColor: 'green',\r\n        backgroundColor: 'rgba(0, 255, 0, 0.2)',\r\n      },\r\n      // ... other datasets\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n  scales: {\r\n      x: {\r\n        type: 'linear', // Ensure x-axis treats labels as numerical values\r\n      },\r\n    },\r\n  };\r\n  // const data = {\r\n  //   labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\r\n  //   datasets: [\r\n  //     {\r\n  //       label: \"First dataset\",\r\n  //       data: [33, 53, 85, 41, 44, 65],\r\n  //       fill: true,\r\n  //       backgroundColor: \"rgba(75,192,192,0.2)\",\r\n  //       borderColor: \"rgba(75,192,192,1)\"\r\n  //     },\r\n  //     {\r\n  //       label: \"Second dataset\",\r\n  //       data: [33, 25, 35, 51, 54, 76],\r\n  //       fill: false,\r\n  //       borderColor: \"#742774\"\r\n  //     }\r\n  //   ]\r\n  // };\r\n  // console.log(\"Dat for plot\", data)\r\n\r\n  // const options = {\r\n  //   responsive: true,\r\n  //   interaction: {\r\n  //     mode: 'index',\r\n  //     intersect: false,\r\n  //   },\r\n  //   stacked: false,\r\n  //   plugins: {\r\n  //     title: {\r\n  //       display: true,\r\n  //       text: 'Chart.js Line Chart - Multi Axis',\r\n  //     },\r\n  //   },\r\n  //   scales: {\r\n  //     y: {\r\n  //       type: 'linear',\r\n  //       display: true,\r\n  //       position: 'left',\r\n  //     },\r\n  //     y1: {\r\n  //       type: 'linear',\r\n  //       display: true,\r\n  //       position: 'right',\r\n  //       grid: {\r\n  //         drawOnChartArea: false,\r\n  //       },\r\n  //     },\r\n  //   },\r\n  // };\r\n  \r\n  // const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\r\n  \r\n  //   labels,\r\n  //   datasets: [\r\n  //     {\r\n  //       label: 'Dataset 1',\r\n  //       data: plot.map((e) => e.x_axis),\r\n  //       borderColor: 'rgb(255, 99, 132)',\r\n  //       backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n  //       yAxisID: 'y',\r\n  //     },\r\n  //     // {\r\n  //     //   label: 'Dataset 2',\r\n  //     //   // data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\r\n  //     //   borderColor: 'rgb(53, 162, 235)',\r\n  //     //   backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n  //     //   yAxisID: 'y1',\r\n  //     // },\r\n  //   ],\r\n  // };\r\n  return (\r\n    <div>\r\n        <h3>Plot</h3>\r\n        {/* <Line options={options} data={data} />; */}\r\n        {/* <Line data={data} opti  ons={options} /> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chart"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,QAAQ,QAAQ,OAAO;AAChC,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;AACjB,SAASC,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGvCV,OAAO,CAACW,QAAQ,CACdV,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MACF,CAAC;AAED,SAASR,KAAKA,CAAC;EAACa,QAAQ;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAElC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMmB,WAAW,GAAG,MAAAA,CAAA,KAAW;IAC3B;IACA;IACA;;IAEA;IACA;IACAC,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;EACzB,CAAC;EAEDf,SAAS,CAAC,MAAM;IACdoB,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACF,IAAI,CAAC,CAAC;EAEV,MAAMK,IAAI,GAAG;IACXC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,WAAW;MAClBF,IAAI,EAAE,CAAC;QAAEG,CAAC,EAAE,EAAE;QAAEC,CAAC,EAAE;MAAG,CAAC,EAAE;QAAED,CAAC,EAAE,EAAE;QAAEC,CAAC,EAAE;MAAG,CAAC,EAAE;QAAED,CAAC,EAAE,EAAE;QAAEC,CAAC,EAAE;MAAG,CAAC,CAAC;MAC5DC,WAAW,EAAE,MAAM;MACnBC,eAAe,EAAE;IACnB,CAAC,EACD;MACEJ,KAAK,EAAE,WAAW;MAClBF,IAAI,EAAE,CAAC;QAAEG,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAG,CAAC,EAAE;QAAED,CAAC,EAAE,EAAE;QAAEC,CAAC,EAAE;MAAG,CAAC,EAAE;QAAED,CAAC,EAAE,EAAE;QAAEC,CAAC,EAAE;MAAG,CAAC,CAAC;MAC3DC,WAAW,EAAE,OAAO;MACpBC,eAAe,EAAE;IACnB;IACA;IAAA;EAEJ,CAAC;;EAED,MAAMC,OAAO,GAAG;IAChBC,MAAM,EAAE;MACJL,CAAC,EAAE;QACDM,IAAI,EAAE,QAAQ,CAAE;MAClB;IACF;EACF,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,oBACEnB,OAAA;IAAAoB,QAAA,eACIpB,OAAA;MAAAoB,QAAA,EAAI;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGZ,CAAC;AAEV;AAACpB,EAAA,CAvHQf,KAAK;AAAAoC,EAAA,GAALpC,KAAK;AAyHd,eAAeA,KAAK;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}